// Generated by gencpp from file ros_topic/messages.msg
// DO NOT EDIT!


#ifndef ROS_TOPIC_MESSAGE_MESSAGES_H
#define ROS_TOPIC_MESSAGE_MESSAGES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_topic
{
template <class ContainerAllocator>
struct messages_
{
  typedef messages_<ContainerAllocator> Type;

  messages_()
    : stamp()  {
    }
  messages_(const ContainerAllocator& _alloc)
    : stamp()  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::ros_topic::messages_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_topic::messages_<ContainerAllocator> const> ConstPtr;

}; // struct messages_

typedef ::ros_topic::messages_<std::allocator<void> > messages;

typedef boost::shared_ptr< ::ros_topic::messages > messagesPtr;
typedef boost::shared_ptr< ::ros_topic::messages const> messagesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_topic::messages_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_topic::messages_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_topic::messages_<ContainerAllocator1> & lhs, const ::ros_topic::messages_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_topic::messages_<ContainerAllocator1> & lhs, const ::ros_topic::messages_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_topic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_topic::messages_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_topic::messages_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_topic::messages_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_topic::messages_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_topic::messages_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_topic::messages_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_topic::messages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84d365d08d5fc49dde870daba1c7992c";
  }

  static const char* value(const ::ros_topic::messages_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84d365d08d5fc49dULL;
  static const uint64_t static_value2 = 0xde870daba1c7992cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_topic::messages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_topic/messages";
  }

  static const char* value(const ::ros_topic::messages_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_topic::messages_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
;
  }

  static const char* value(const ::ros_topic::messages_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_topic::messages_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct messages_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_topic::messages_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_topic::messages_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TOPIC_MESSAGE_MESSAGES_H
